doctype html
html
  head
    meta(charset='UTF-8')
    title Task manager UI

    link(rel='stylesheet', href='/css/style.css')
    link(rel='stylesheet', href='/stylesheets/bootstrap.css')
    link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')
  style.
    /* notifications */
    #notifications-container {
    display: block;
    position: absolute;
    top: 10px;
    right: 10px;
    }
    .notifications {
    display: block;
    position: relative;
    padding: 15px 15px 15px 60px;
    overflow: hidden;
    height:100px;
    width: 250px;
    border-radius: 4px;
    box-shadow: 0 0 12px #999;
    color: #fff;
    -webkit-animation: show-notifications 3s ease-out;
    animation: show-notifications 3s ease-out;
    }
    .notifications-close {
    padding: 0;
    cursor: pointer;
    background: none;
    border: 0;
    outline: none;
    -webkit-appearance: none;
    position: absolute;
    top: 5px;
    right: 10px;
    color: #fff;
    text-shadow: 0 1px 0 #ddd;
    }
    .notifications-close::before {
    font-family: 'FontAwesome';
    font-size: 12px;
    font-weight: normal;
    content: '\f00d';
    }
    .notifications-close:hover {
    color: #666;
    }
    .notifications-title {
    font-size: 1.1em;
    font-weight: bold;
    }
    .notifications-success::before,
    .notifications-error::before,
    .notifications-info::before,
    .notifications-warning::before {
    font-family: 'FontAwesome';
    font-size: 35px;
    display: block;
    position: absolute;
    left: 15px;
    top: 50%;
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
    }
    .notifications-success {
    background-color: #90b900;
    }
    .notifications-success::before {
    content: '\f058';
    }
    .notifications-error {
    background-color: #e85656;
    }
    .notifications-error::before {
    content: '\f057';
    }
    .notifications-info {
    background-color: #2dacd1;
    }
    .notifications-info::before {
    content: '\f05a';
    }
    .notifications-warning {
    background-color: #dfb81c;
    }
    .notifications-warning::before {
    content: '\f071';
    }
    @-webkit-keyframes show-notifications {
    0% {
    opacity: 0;
    -webkit-transform: translate(0, -100%);
    }
    10% {
    opacity: 1;
    -webkit-transform: translate(0, 0);
    }
    90% {
    opacity: 1;
    -webkit-transform: translate(0, 0);
    }
    100% {
    opacity: 0;
    -webkit-transform: translate(0, -100%);
    }
    }
    @keyframes show-notifications {
    0% {
    opacity: 0;
    -webkit-transform: translate(0, -100%);
    transform: translate(0, -100%);
    }
    10% {
    opacity: 1;
    -webkit-transform: translate(0, 0);
    transform: translate(0, 0);
    }
    90% {
    opacity: 1;
    -webkit-transform: translate(0, 0);
    transform: translate(0, 0);
    }
    100% {
    opacity: 0;
    -webkit-transform: translate(0, -100%);
    transform: translate(0, -100%);
    }
    }  
    
  body(ng-app="myApp",ng-controller='homeController' )
    .page
    
      .pageHeader
        .title Dashboard
        .userPanel
          span.username
            a(href='/logout') Logout 
      .main
        .nav
          .menu
            .title Navigation
            ul
              li.active
                i.fa.fa-home
                a(data-toggle="tab" href="#home" ng-init="getData()",ng-click="getData()")  Home
              li
                i.fa.fa-tasks
                a(data-toggle="tab" href="#setting",ng-click="getToken()")  Token Setting
              li
                i.fa.fa-tasks
                a(data-toggle="tab" href="#pingSetting")  Ping Setting
              li
                i.fa.fa-tasks
                a(data-toggle="tab" href="#users" ,ng-click="getUser()")  Users
              li
                i.fa.fa-tasks
                a(data-toggle="tab" href="#changepassword")  Change Password
        .view
          #notifications-container
          .viewHeader
            .title Available Data

            .tab-content
              
              #home.tab-pane.fade.in.active
                table.table.table-striped
                    thead.thead-inverse
                        tr
                        th Family Name
                        th Ip
                        th Port
                        th Repeat Time
                        th Status
                        th Action
                    tbody
                        tr(ng-repeat="data in dataSet")
                            td {[{data.familyName}]}
                            td {[{data.ip}]}
                            td {[{data.port}]}
                            td {[{data.repeatTime}]}
                            td {[{data.status}]}
                            td
                              button.btn.btn-success(type='button',ng-if='data.status=="stopped"' ng-click='startPing(data._id)') Start
                              button.btn.btn-danger(type='button',ng-if='data.status=="running"' ng-click='stop(data._id)') Stop
                              button.btn.btn-warning(type='button',data-toggle="modal", data-target="#myModal" ng-click='setEditData(data._id,data.familyName,data.port,data.ip,data.pingTime,data.repeatTime)') Edit
                              button.btn.btn-primary(type='button', ng-click='delete(data._id)') Delete
              #myModal.modal.fade(role='dialog')
                .modal-dialog
                  .modal-content
                    .modal-header(style='background-color:green')
                      button.close(type='button', data-dismiss='modal') Ã—
                      center
                        h4.modal-title Edit
                    .modal-body
                      br
                      .form-group.row
                        .col-xs-6
                          label Family Name
                          input.form-control(type='text'  ng-model='editdata.familyName')
                        .col-xs-6
                          label IP
                          input.form-control(type='text'  ng-model='editdata.ip')
                        .col-xs-6
                          label Port
                          input.form-control(type='text' ng-model='editdata.port')
                        .col-xs-6
                          label If ping bigger than
                          input.form-control(type='text'  ng-model='editdata.pingTime')
                        .col-xs-6
                          label Ping Every
                          input.form-control(type='text' ng-model='editdata.repeatTime') 
                          br
                        .col-xs-12
                          .col-xs-6
                            button.btn.btn-primary.btn-block(type='button',ng-click='edit()',data-dismiss='modal') SUBMIT
        
                      .modal-footer
                        button.btn.btn-default(type='button', data-dismiss='modal') Close

              #setting.tab-pane.fade
                br
                .form-group.row
                  .col-xs-7
                    label Token Id
                    input.form-control(type='text' placeholder='Token Id' ng-model='tokendata.tokenId')
                  br
                  .col-xs-7
                    label Chat Id
                    input.form-control(type='text' placeholder='Chat Id' ng-model='tokendata.chatId')
                    br
                  .col-xs-7
                    button.btn.btn-primary.btn-block(type='button',ng-click='submitToken()') SUBMIT
              #pingSetting.tab-pane.fade
                br
                .form-group.row
                  .col-xs-6
                    label Family Name
                    input.form-control(type='text' placeholder='Family Name' ng-model='pingdata.familyName')
                  .col-xs-6
                    label IP
                    input.form-control(type='text' placeholder='ip' ng-model='pingdata.ip')
                  .col-xs-6
                    label Port
                    input.form-control(type='text' placeholder='port' ng-model='pingdata.port')
                  .col-xs-6
                    label If ping bigger than
                    input.form-control(type='text' placeholder='ping time' ng-model='pingdata.pingTime')
                  .col-xs-6
                    label Ping Every
                    input.form-control(type='text' placeholder='repeat time' ng-model='pingdata.repeatTime') 
                    br
                  .col-xs-12
                    .col-xs-6
                      button.btn.btn-primary.btn-block(type='button',ng-click='submitPing()') SUBMIT
              #users.tab-pane.fade 
                table.table.table-striped
                    thead.thead-inverse
                        tr
                        th UserName
                    tbody
                        tr(ng-repeat="user in users")
                            td {[{user.userName}]}
              #changepassword.tab-pane.fade
                br
                .form-group.row
                  .col-xs-7
                    label New password
                    input.form-control(type='password' placeholder='new password' ng-model='password.newPassword')
                  br
                  .col-xs-7
                    label Confirm Password
                    input.form-control(type='password' placeholder='confirm password' ng-model='password.confirmPassword')
                    br
                  .col-xs-7
                    button.btn.btn-primary.btn-block(type='button',ng-click='changePassword()') SUBMIT    
    script.
      var notifications;
      var container = document.querySelector('#notifications-container');
      var visible = false;
      var queue = [];
      function createnotifications() {
      notifications = document.createElement('div');
      var btn = document.createElement('button');
      var title = document.createElement('div');
      var msg = document.createElement('div');
      btn.className = 'notifications-close';
      title.className = 'notifications-title';
      msg.className = 'notifications-message';
      btn.addEventListener('click', hidenotifications, false);
      notifications.addEventListener('animationend', hidenotifications, false);
      notifications.addEventListener('webkitAnimationEnd', hidenotifications, false);
      notifications.appendChild(btn);
      notifications.appendChild(title);
      notifications.appendChild(msg);
      }
      function updatenotifications(type, title, message) {
      notifications.className = 'notifications notifications-' + type;
      notifications.querySelector('.notifications-title').innerHTML = title;
      notifications.querySelector('.notifications-message').innerHTML = message;
      }
      function shownotifications(type, title, message) {
      if (visible) {
      queue.push([type, title, message]);
      return;
      }
      if (!notifications) {
      createnotifications();
      }
      updatenotifications(type, title, message);
      container.appendChild(notifications);
      visible = true;
      }
      function hidenotifications() {
      if (visible) {
      visible = false;
      container.removeChild(notifications);
      if (queue.length) {
      shownotifications.apply(null, queue.shift());
      }
      }
      }
      function status(){
      shownotifications('success', 'Success!', 'Data saved Successfully.')
      }
      function error(){
      shownotifications('error', 'Error!', 'Something went wrong. Please try again.')
      }
      function pingStart(){
      shownotifications('success', 'Success!', 'Ping stated Successfully.')
      }
      function pingStop(){
      shownotifications('success', 'Success!', 'Ping Stopped Successfully.')
      }
      function pingDelete(){
      shownotifications('success', 'Success!', 'Deleted Successfully.')
      }
      function passwordError(){
      shownotifications('error', 'Error!', 'Password doesnot match.')
      }
      function password(){
      shownotifications('success', 'Success!', 'Password changed Successfully.')
      }
      function passwordInvalid(){
      shownotifications('error', 'Error!', 'Invalid Password.')
      }
    script(src='/javascripts/jquery.js')
    script(src='/javascripts/bootstrap.min.js')
    script(src='/javascripts/angular.js')
    script(src='/javascripts/angular.min.js.map')
    script(src='/javascripts/angular-cookies.js')
    script(src='/javascripts/script.js')